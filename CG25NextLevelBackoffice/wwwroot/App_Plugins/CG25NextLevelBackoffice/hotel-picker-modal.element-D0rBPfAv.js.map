{"version":3,"file":"hotel-picker-modal.element-D0rBPfAv.js","sources":["../../../Client/src/umbrago-hotel-picker/hotel-document-data.manager.ts","../../../Client/src/umbrago-hotel-picker/hotel-picker-modal.element.ts"],"sourcesContent":["import { UmbControllerBase } from \"@umbraco-cms/backoffice/class-api\";\nimport { UmbControllerHost } from \"@umbraco-cms/backoffice/controller-api\";\nimport {\n  UMB_DOCUMENT_SEARCH_PROVIDER_ALIAS,\n  UmbDocumentDetailModel,\n  UmbDocumentDetailRepository,\n  UmbDocumentItemModel,\n  UmbDocumentItemRepository,\n  UmbDocumentTreeItemModel,\n  UmbDocumentTreeRepository,\n} from \"@umbraco-cms/backoffice/document\";\nimport { createExtensionApiByAlias } from \"@umbraco-cms/backoffice/extension-registry\";\nimport { UmbArrayState } from \"@umbraco-cms/backoffice/observable-api\";\nimport { UmbSearchProvider } from \"@umbraco-cms/backoffice/search\";\n\n/* Note: POC code. Data requests for the picker is handled by this manager. It currently makes more requests than ideal. \nA better solution would be a custom endpoint or a more flexible \"filter\"-style endpoint in the Management API for document. */\nexport class UmbraGoHotelDocumentDataManager extends UmbControllerBase {\n  #hotelsContainers: Array<UmbDocumentItemModel> = [];\n  #countryHotelsMap = new Map();\n  #treeRepository = new UmbDocumentTreeRepository(this);\n  #detailRepository = new UmbDocumentDetailRepository(this);\n  #itemRepository = new UmbDocumentItemRepository(this);\n\n  #countriesForHotels = new UmbArrayState<UmbDocumentItemModel>(\n    [],\n    (x) => x.unique\n  );\n  public readonly countriesForHotels = this.#countriesForHotels.asObservable();\n\n  #hotelTreeItems = new UmbArrayState<UmbDocumentTreeItemModel>(\n    [],\n    (x) => x.unique\n  );\n  public readonly hotelTreeItems = this.#hotelTreeItems.asObservable();\n\n  #hotelDetails = new UmbArrayState<UmbDocumentDetailModel>(\n    [],\n    (x) => x.unique\n  );\n  public readonly hotelDetailItems = this.#hotelDetails.asObservable();\n\n  constructor(host: UmbControllerHost) {\n    super(host);\n    this.#loadHotels();\n  }\n\n  async #loadHotels() {\n    await this.#loadCountriesForHotels();\n    await this.#loadHotelTreeItems();\n    await this.#loadHotelDetails();\n  }\n\n  async #loadCountriesForHotels() {\n    await this.#loadHotelContainers();\n\n    this.#hotelsContainers.forEach((containers) => {\n      // get the country unique from the parent\n      const countryUnique = containers.parent?.unique;\n      // store the container/country relationship as we need it for filtering when rendering\n      this.#countryHotelsMap.set(countryUnique, containers.unique);\n    });\n\n    const countryUniques = this.#hotelsContainers\n      .map((item) => item.parent!.unique)\n      .filter(Boolean) as Array<string>;\n\n    const { data: itemData } = await this.#itemRepository.requestItems(\n      countryUniques\n    );\n\n    this.#countriesForHotels.setValue(itemData ?? []);\n  }\n\n  async #loadHotelContainers() {\n    const searchProvider = await createExtensionApiByAlias<\n      UmbSearchProvider<any, any>\n    >(this, UMB_DOCUMENT_SEARCH_PROVIDER_ALIAS);\n\n    if (!searchProvider) {\n      throw new Error(\"Document search repository is not initialized.\");\n    }\n\n    const HOTEL_CONTAINER_DOCUMENT_TYPE_UNIQUE =\n      \"f0bcd3c0-78f6-42f4-bd9b-f0bcd3c034bf\";\n\n    const { data } = await searchProvider.search({\n      allowedContentTypes: [{ unique: HOTEL_CONTAINER_DOCUMENT_TYPE_UNIQUE }],\n      query: \"Hotels\",\n    });\n\n    this.#hotelsContainers = data?.items ?? [];\n  }\n\n  async #loadHotelTreeItems() {\n    const promises = this.#hotelsContainers.map((item) =>\n      this.#treeRepository.requestTreeItemsOf({\n        parent: {\n          entityType: item.entityType,\n          unique: item.unique,\n        },\n      })\n    );\n\n    const treeItemResults = await Promise.all(promises);\n\n    const hotelTreeItems = treeItemResults\n      .flatMap((result) => result.data ?? [])\n      .flatMap((data) => data.items ?? []);\n\n    this.#hotelTreeItems.setValue(hotelTreeItems);\n  }\n\n  async #loadHotelDetails() {\n    const detailPromises = this.#hotelTreeItems\n      .getValue()\n      .map((treeItem) =>\n        this.#detailRepository?.requestByUnique(treeItem.unique)\n      );\n    const detailResults = await Promise.all(detailPromises);\n    const hotelDetails = detailResults\n      .map((result) => result.data)\n      .filter(Boolean) as Array<UmbDocumentDetailModel>;\n\n    this.#hotelDetails.setValue(hotelDetails);\n  }\n\n  public getHotelContainerForCountry(countryUnique: string) {\n    return this.#countryHotelsMap.get(countryUnique);\n  }\n}\n","import {\r\n  UmbDocumentDetailModel,\r\n  UmbDocumentItemModel,\r\n  UmbDocumentItemRepository,\r\n  UmbDocumentTreeItemModel,\r\n} from \"@umbraco-cms/backoffice/document\";\r\nimport {\r\n  css,\r\n  html,\r\n  customElement,\r\n  state,\r\n  property,\r\n  PropertyValueMap,\r\n  repeat,\r\n  nothing,\r\n} from \"@umbraco-cms/backoffice/external/lit\";\r\nimport {\r\n  UUISelectEvent,\r\n  UUITextStyles,\r\n} from \"@umbraco-cms/backoffice/external/uui\";\r\nimport { UmbModalBaseElement } from \"@umbraco-cms/backoffice/modal\";\r\nimport {\r\n  UmbraGoHotelPickerModalData,\r\n  UmbraGoHotelPickerModalValue,\r\n} from \"./hotel-picker-modal.token\";\r\nimport { UmbPickerContext } from \"@umbraco-cms/backoffice/picker\";\r\nimport { UmbTreeSelectionConfiguration } from \"@umbraco-cms/backoffice/tree\";\r\nimport { UmbraGoHotelDocumentDataManager } from \"./hotel-document-data.manager\";\r\nimport { UmbContentPickerValueModel } from \"./hotel-picker-property-editor-ui.element\";\r\n\r\n@customElement(\"umbrago-hotel-picker-modal\")\r\nexport class UmbraGoHotelPickerModalElement extends UmbModalBaseElement<\r\n  UmbraGoHotelPickerModalData,\r\n  UmbraGoHotelPickerModalValue\r\n> {\r\n  @state()\r\n  _facilities: Array<UmbDocumentItemModel> = [];\r\n\r\n  @state()\r\n  _selectionConfiguration: UmbTreeSelectionConfiguration = {\r\n    multiple: true,\r\n    selectable: true,\r\n    selection: [],\r\n  };\r\n\r\n  @property({ type: Object })\r\n  public get data(): UmbraGoHotelPickerModalData | undefined {\r\n    return this.#data;\r\n  }\r\n  public set data(value: UmbraGoHotelPickerModalData | undefined) {\r\n    this.#data = value;\r\n    this.#loadFacilities();\r\n  }\r\n\r\n  #data: UmbraGoHotelPickerModalData | undefined;\r\n  #documentItemRepository = new UmbDocumentItemRepository(this);\r\n  #pickerContext = new UmbPickerContext(this);\r\n  /* Note: POC code. Data requests for the picker is handled by this manager. It currently makes more requests than ideal. \r\n  A better solution would be a custom endpoint or a more flexible \"filter\"-style endpoint in the Management API for document. */\r\n  #hotelDocumentDataManager = new UmbraGoHotelDocumentDataManager(this);\r\n\r\n  @state()\r\n  _countries: Array<UmbDocumentItemModel> = [];\r\n\r\n  @state()\r\n  _hotelTreeItems: Array<UmbDocumentTreeItemModel> = [];\r\n\r\n  @state()\r\n  _hotelDetailItems: Array<UmbDocumentDetailModel> = [];\r\n\r\n  constructor() {\r\n    super();\r\n    this.#pickerContext.selection.setSelectable(true);\r\n    this.#pickerContext.selection.setMultiple(true);\r\n    this.#observePickerSelection();\r\n\r\n    this.observe(\r\n      this.#hotelDocumentDataManager.countriesForHotels,\r\n      (countries) => {\r\n        this._countries = countries;\r\n      },\r\n      \"umbraGoHotelPickerCountriesObserver\"\r\n    );\r\n\r\n    this.observe(\r\n      this.#hotelDocumentDataManager.hotelTreeItems,\r\n      (hotelTreeItems) => {\r\n        this._hotelTreeItems = hotelTreeItems;\r\n      },\r\n      \"umbraGoHotelPickerHotelTreeItemsObserver\"\r\n    );\r\n\r\n    this.observe(\r\n      this.#hotelDocumentDataManager.hotelDetailItems,\r\n      (hotelDetailItems) => {\r\n        this._hotelDetailItems = hotelDetailItems;\r\n      },\r\n      \"umbraGoHotelPickerHotelDetailItemsObserver\"\r\n    );\r\n  }\r\n\r\n  protected override async updated(\r\n    _changedProperties: PropertyValueMap<any> | Map<PropertyKey, unknown>\r\n  ) {\r\n    super.updated(_changedProperties);\r\n\r\n    if (_changedProperties.has(\"data\")) {\r\n      const multiple = this.data?.multiple ?? false;\r\n      this.#pickerContext.selection.setMultiple(multiple);\r\n\r\n      this._selectionConfiguration = {\r\n        ...this._selectionConfiguration,\r\n        multiple,\r\n      };\r\n    }\r\n\r\n    if (_changedProperties.has(\"value\")) {\r\n      const selection = this.value?.selection ?? [];\r\n      this.#pickerContext.selection.setSelection(selection);\r\n      this._selectionConfiguration = {\r\n        ...this._selectionConfiguration,\r\n        selection: [...selection],\r\n      };\r\n    }\r\n  }\r\n\r\n  #observePickerSelection() {\r\n    this.observe(\r\n      this.#pickerContext.selection.selection,\r\n      (selection) => {\r\n        this.updateValue({ selection });\r\n        this.requestUpdate();\r\n      },\r\n      \"umbragoPickerSelectionObserver\"\r\n    );\r\n  }\r\n\r\n  async #loadFacilities() {\r\n    if (\r\n      !this.data?.facilityDocuments ||\r\n      this.data.facilityDocuments.length === 0\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const { data } = await this.#documentItemRepository.requestItems(\r\n      this.data.facilityDocuments\r\n    );\r\n\r\n    if (data) {\r\n      this._facilities = data;\r\n    }\r\n  }\r\n\r\n  #onItemSelected(event: UUISelectEvent, item: UmbDocumentTreeItemModel) {\r\n    event.stopPropagation();\r\n    this.#pickerContext.selection.select(item.unique);\r\n  }\r\n\r\n  #onItemDeselected(event: UUISelectEvent, item: UmbDocumentTreeItemModel) {\r\n    event.stopPropagation();\r\n    this.#pickerContext.selection.deselect(item.unique);\r\n  }\r\n\r\n  #getFilteredHotels(countryUnique: string) {\r\n    const hotelsForCountry = this.#filterHotelsByCountry(\r\n      this._hotelTreeItems,\r\n      countryUnique\r\n    );\r\n\r\n    return this.#filterHotelsByFacilities(hotelsForCountry);\r\n  }\r\n\r\n  #filterHotelsByCountry(\r\n    hotels: Array<UmbDocumentTreeItemModel>,\r\n    countryUnique: string\r\n  ) {\r\n    const hotelContainerUnique =\r\n      this.#hotelDocumentDataManager.getHotelContainerForCountry(countryUnique);\r\n    if (!hotelContainerUnique) return [];\r\n\r\n    return hotels.filter(\r\n      (hotel) => hotel.parent.unique === hotelContainerUnique\r\n    );\r\n  }\r\n\r\n  #filterHotelsByFacilities(hotels: Array<UmbDocumentTreeItemModel>) {\r\n    if (this._facilities.length === 0) {\r\n      return this._hotelTreeItems;\r\n    }\r\n\r\n    return hotels.filter((hotel) => {\r\n      const hotelDetails = this._hotelDetailItems.find(\r\n        (detail) => detail.unique === hotel.unique\r\n      );\r\n      if (!hotelDetails) return false;\r\n\r\n      // Check if the hotel has all the facilities\r\n      return this._facilities.every((facility) =>\r\n        hotelDetails.values.some((property) => {\r\n          if (property.alias === \"facilities\") {\r\n            const value = property.value as UmbContentPickerValueModel;\r\n            // Check if the facility is in the hotel details\r\n            return value.some((value) => value.unique === facility.unique);\r\n          }\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return html`<umb-body-layout headline=\"Choose Hotels\">\r\n      <uui-box>\r\n        <div id=\"facilities\">\r\n          <h4>Facilities:</h4>\r\n          ${this._facilities.map(\r\n            (facility) =>\r\n              html`<uui-tag look=\"secondary\">${facility.name}</uui-tag>`\r\n          )}\r\n        </div>\r\n        <div id=\"divider\"></div>\r\n        ${repeat(\r\n          this._countries,\r\n          (item) => item.unique,\r\n          (item) => this.#renderCountry(item)\r\n        )}\r\n      </uui-box>\r\n      ${this.#renderActions()}\r\n    </umb-body-layout>`;\r\n  }\r\n\r\n  #renderCountry(countryDocument: UmbDocumentItemModel) {\r\n    // We skip a level in the tree structure so we look up the relationship in the map\r\n    const filteredHotels = this.#getFilteredHotels(countryDocument.unique);\r\n    const hasHotels = filteredHotels.length > 0;\r\n    if (!hasHotels) return nothing;\r\n\r\n    return html`\r\n      <uui-menu-item\r\n        label=${countryDocument.name}\r\n        ?has-children=${hasHotels}\r\n        show-children\r\n      >\r\n        <uui-icon\r\n          name=${countryDocument.documentType.icon}\r\n          slot=\"icon\"\r\n        ></uui-icon>\r\n        ${this.#renderHotels(filteredHotels)}\r\n      </uui-menu-item>\r\n    `;\r\n  }\r\n\r\n  #renderHotels(hotels: Array<UmbDocumentTreeItemModel>) {\r\n    return html`\r\n      ${repeat(\r\n        hotels,\r\n        (item) => item.unique,\r\n        (item) => this.#renderHotel(item)\r\n      )}\r\n    `;\r\n  }\r\n\r\n  #renderHotel(hotel: UmbDocumentTreeItemModel) {\r\n    return html`\r\n      <uui-menu-item\r\n        label=${hotel.name}\r\n        selectable\r\n        ?selected=${this.#pickerContext.selection.isSelected(hotel.unique)}\r\n        @selected=${(e: UUISelectEvent) => this.#onItemSelected(e, hotel)}\r\n        @deselected=${(e: UUISelectEvent) => this.#onItemDeselected(e, hotel)}\r\n      >\r\n        <uui-icon name=${hotel.documentType.icon} slot=\"icon\"></uui-icon>\r\n        ${hotel.name}\r\n      </uui-menu-item>\r\n    `;\r\n  }\r\n\r\n  #renderActions() {\r\n    return html`\r\n      <div slot=\"actions\">\r\n        <uui-button label=\"Close\" @click=${this._rejectModal}></uui-button>\r\n        <uui-button\r\n          label=\"Submit\"\r\n          look=\"primary\"\r\n          color=\"positive\"\r\n          @click=${this._submitModal}\r\n        ></uui-button>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  static styles = [\r\n    UUITextStyles,\r\n    css`\r\n      #facilities {\r\n        display: inline-flex;\r\n        gap: var(--uui-size-space-1);\r\n        flex-wrap: wrap;\r\n\r\n        h4 {\r\n          margin: 0;\r\n        }\r\n      }\r\n\r\n      #divider {\r\n        width: 100%;\r\n        height: 1px;\r\n        background-color: var(--uui-color-divider);\r\n        margin-top: var(--uui-size-space-3);\r\n        margin-bottom: var(--uui-size-space-3);\r\n      }\r\n    `,\r\n  ];\r\n}\r\n\r\nexport { UmbraGoHotelPickerModalElement as element };\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    \"umbrago-hotel-picker-modal\": UmbraGoHotelPickerModalElement;\r\n  }\r\n}\r\n"],"names":["UmbraGoHotelDocumentDataManager","UmbControllerBase","host","__privateAdd","_UmbraGoHotelDocumentDataManager_instances","_hotelsContainers","_countryHotelsMap","_treeRepository","_detailRepository","_itemRepository","_countriesForHotels","_hotelTreeItems","_hotelDetails","__privateSet","UmbDocumentTreeRepository","UmbDocumentDetailRepository","UmbDocumentItemRepository","UmbArrayState","x","__privateGet","__privateMethod","loadHotels_fn","countryUnique","loadCountriesForHotels_fn","loadHotelTreeItems_fn","loadHotelDetails_fn","loadHotelContainers_fn","containers","_a","countryUniques","item","itemData","searchProvider","createExtensionApiByAlias","UMB_DOCUMENT_SEARCH_PROVIDER_ALIAS","HOTEL_CONTAINER_DOCUMENT_TYPE_UNIQUE","data","promises","hotelTreeItems","result","detailPromises","treeItem","hotelDetails","_data","_documentItemRepository","_pickerContext","_hotelDocumentDataManager","_UmbraGoHotelPickerModalElement_instances","observePickerSelection_fn","loadFacilities_fn","onItemSelected_fn","onItemDeselected_fn","getFilteredHotels_fn","filterHotelsByCountry_fn","filterHotelsByFacilities_fn","renderCountry_fn","renderHotels_fn","renderHotel_fn","renderActions_fn","UmbraGoHotelPickerModalElement","UmbModalBaseElement","UmbPickerContext","countries","hotelDetailItems","value","_changedProperties","multiple","selection","_b","html","facility","repeat","event","hotelsForCountry","hotels","hotelContainerUnique","hotel","detail","property","countryDocument","filteredHotels","hasHotels","nothing","e","UUITextStyles","css","__decorateClass","state","customElement"],"mappings":"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"}