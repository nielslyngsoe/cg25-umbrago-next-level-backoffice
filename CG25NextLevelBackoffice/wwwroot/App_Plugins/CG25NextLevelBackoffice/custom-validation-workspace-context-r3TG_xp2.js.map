{"version":3,"file":"custom-validation-workspace-context-r3TG_xp2.js","sources":["../../../Client/src/umbrago-custom-validation/custom-validation-validator.ts","../../../Client/src/umbrago-custom-validation/custom-validation-workspace-context.ts"],"sourcesContent":["import { UmbControllerBase } from \"@umbraco-cms/backoffice/class-api\";\nimport type { UmbControllerHost } from \"@umbraco-cms/backoffice/controller-api\";\nimport { UMB_CONTENT_WORKSPACE_CONTEXT } from \"@umbraco-cms/backoffice/content\";\nimport {\n  UMB_VALIDATION_CONTEXT,\n  UmbDataPathPropertyValueQuery,\n  type UmbValidator,\n} from \"@umbraco-cms/backoffice/validation\";\nimport type { UmbVariantId } from \"@umbraco-cms/backoffice/variant\";\n\n// The Example Workspace Context Controller:\nexport class CustomValidationValidator\n  extends UmbControllerBase\n  implements UmbValidator\n{\n  //\n  #validationContext?: typeof UMB_VALIDATION_CONTEXT.TYPE;\n  #workspaceContext?: typeof UMB_CONTENT_WORKSPACE_CONTEXT.TYPE;\n\n  #msgKey: string;\n  #propertyAlias: string;\n  #variantId?: UmbVariantId;\n  #dataPath: string;\n  #isValid: boolean = false;\n  #value?: string;\n\n  constructor(\n    host: UmbControllerHost,\n    propertyAlias: string,\n    variantId?: UmbVariantId\n  ) {\n    super(host);\n    this.#propertyAlias = propertyAlias;\n    this.#variantId = variantId;\n\n    this.#msgKey = \"custom_word_count_\" + this.#variantId?.toString();\n\n    this.#dataPath = `$.values[${UmbDataPathPropertyValueQuery({\n      alias: this.#propertyAlias,\n      culture: this.#variantId?.culture ?? null,\n      segment: this.#variantId?.segment ?? null,\n    })}].value`;\n\n    this.consumeContext(UMB_VALIDATION_CONTEXT, (context) => {\n      this.#validationContext = context;\n      this.#checkValidation();\n    });\n\n    this.consumeContext(UMB_CONTENT_WORKSPACE_CONTEXT, async (context) => {\n      this.#workspaceContext = context;\n      this.observe(\n        await context?.propertyValueByAlias<string>(\n          propertyAlias,\n          this.#variantId\n        ),\n        (value) => {\n          this.#value = value;\n          this.#checkValidation();\n        }\n      );\n    });\n  }\n\n  #checkValidation() {\n    // Check value for validation:\n    const words =\n      this.#value?.split(/\\s+/).filter((x) => x.length > 0).length ?? 0;\n    if (words > 10) {\n      this.#isValid = false;\n    } else {\n      this.#isValid = true;\n    }\n\n    // Update validation message:\n    if (this.#validationContext && this.#workspaceContext) {\n      if (this.#isValid) {\n        this.#validationContext.messages.removeMessageByKey(this.#msgKey);\n      } else {\n        this.#validationContext.messages.addMessage(\n          \"custom\",\n          this.#dataPath,\n          `Must be less than <b>10 words</b>, exceeded by ${words - 10} words.`,\n          this.#msgKey\n        );\n      }\n    }\n  }\n\n  async validate(): Promise<void> {\n    // Validate is called when the validation state of this validator is asked to be fully resolved. Like when user clicks Save & Publish.\n    // If you need to ask the server then it could be done here, instead of asking the server each time the value changes.\n    // In this particular example we do not need to do anything, because our validation is represented via a message that we always set no matter the user interaction.\n    // If we did not like to only to check the Validation State when absolute needed then this method must be implemented.\n  }\n\n  get isValid(): boolean {\n    return this.#isValid;\n  }\n\n  reset(): void {\n    this.#isValid = false;\n  }\n\n  /**\n   * Focus the first invalid element.\n   */\n  focusFirstInvalidElement(): void {\n    alert(\n      \"custom validation is invalid, you should implement a feature to focus the problematic element\"\n    );\n  }\n\n  override destroy(): void {\n    this.#validationContext = undefined;\n    this.#workspaceContext = undefined;\n    this.#value = undefined;\n    super.destroy();\n  }\n}\n\n// Declare a api export, so Extension Registry can initialize this class:\nexport const api = CustomValidationValidator;\n","import { CustomValidationValidator } from \"./custom-validation-validator.js\";\nimport { UmbContextToken } from \"@umbraco-cms/backoffice/context-api\";\nimport { UmbContextBase } from \"@umbraco-cms/backoffice/class-api\";\nimport type { UmbControllerHost } from \"@umbraco-cms/backoffice/controller-api\";\nimport { UMB_CONTENT_WORKSPACE_CONTEXT } from \"@umbraco-cms/backoffice/content\";\nimport { UmbVariantId } from \"@umbraco-cms/backoffice/variant\";\n\n// Configuration for which property alias to validate:\nconst MY_CUSTOM_VALIDATION_PROPERTY_ALIAS = \"tagline\";\n\n// The Validation Workspace Context Controller:\nexport class CustomValidationWorkspaceContext extends UmbContextBase {\n  #validators?: Array<CustomValidationValidator>;\n\n  constructor(host: UmbControllerHost) {\n    super(host, EXAMPLE_CUSTOM_VALIDATION_CONTEXT);\n\n    this.consumeContext(UMB_CONTENT_WORKSPACE_CONTEXT, async (context) => {\n      // Observe the property type to see if it varies by culture:\n      this.observe(\n        await context?.structure.propertyStructureByAlias(\n          MY_CUSTOM_VALIDATION_PROPERTY_ALIAS\n        ),\n        (propertyType) => {\n          if (!propertyType) {\n            this.removeUmbControllerByAlias(\"observeVariantOptions\");\n            this.#validators?.forEach((x) => x.destroy());\n            return;\n          }\n          if (propertyType.variesByCulture) {\n            // Because this property exists in multiple cultures we should observe cultures an create a custom validator for each culture value:\n            this.observe(\n              context?.variantOptions,\n              (variantOptions) => {\n                // clean up old validators:\n                this.#validators?.forEach((x) => x.destroy());\n\n                this.#validators = variantOptions?.map((option) => {\n                  return new CustomValidationValidator(\n                    this,\n                    MY_CUSTOM_VALIDATION_PROPERTY_ALIAS,\n                    UmbVariantId.Create(option)\n                  );\n                });\n              },\n              \"observeVariantOptions\"\n            );\n          } else {\n            // Not varying by culture, so we can just create a single validator for the invariant value:\n            this.#validators?.forEach((x) => x.destroy());\n            this.#validators = [\n              new CustomValidationValidator(\n                this,\n                MY_CUSTOM_VALIDATION_PROPERTY_ALIAS\n              ),\n            ];\n          }\n        },\n        \"observePropertyType\"\n      );\n    });\n  }\n}\n\n// Declare a api export, so Extension Registry can initialize this class:\nexport const api = CustomValidationWorkspaceContext;\n\n// Declare a Context Token, to other can request the context and to ensure typings.\nexport const EXAMPLE_CUSTOM_VALIDATION_CONTEXT =\n  new UmbContextToken<CustomValidationWorkspaceContext>(\n    \"UmbWorkspaceContext\",\n    \"example.workspaceContext.counter\"\n  );\n"],"names":["CustomValidationValidator","UmbControllerBase","host","propertyAlias","variantId","__privateAdd","_CustomValidationValidator_instances","_validationContext","_workspaceContext","_msgKey","_propertyAlias","_variantId","_dataPath","_isValid","_value","__privateSet","_a","__privateGet","UmbDataPathPropertyValueQuery","_b","_c","UMB_VALIDATION_CONTEXT","context","__privateMethod","checkValidation_fn","UMB_CONTENT_WORKSPACE_CONTEXT","value","words","x","MY_CUSTOM_VALIDATION_PROPERTY_ALIAS","CustomValidationWorkspaceContext","UmbContextBase","EXAMPLE_CUSTOM_VALIDATION_CONTEXT","_validators","propertyType","variantOptions","option","UmbVariantId","api","UmbContextToken"],"mappings":"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"}