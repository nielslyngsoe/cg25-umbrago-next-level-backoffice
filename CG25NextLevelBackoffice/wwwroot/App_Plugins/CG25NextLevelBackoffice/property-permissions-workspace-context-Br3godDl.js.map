{"version":3,"file":"property-permissions-workspace-context-Br3godDl.js","sources":["../../../Client/src/property-permissions/property-permissions-setter.ts","../../../Client/src/property-permissions/property-permissions-workspace-context.ts"],"sourcesContent":["import { UmbControllerBase } from \"@umbraco-cms/backoffice/class-api\";\nimport type { UmbControllerHost } from \"@umbraco-cms/backoffice/controller-api\";\nimport { UMB_CONTENT_WORKSPACE_CONTEXT } from \"@umbraco-cms/backoffice/content\";\nimport type { UmbVariantId } from \"@umbraco-cms/backoffice/variant\";\nimport { UmbId } from \"@umbraco-cms/backoffice/id\";\nimport { UmbPropertyTypeModel } from \"@umbraco-cms/backoffice/content-type\";\n\n// The Example Workspace Context Controller:\nexport class CustomPropertyPermissionSetter extends UmbControllerBase {\n  //\n  #workspaceContext?: typeof UMB_CONTENT_WORKSPACE_CONTEXT.TYPE;\n\n  #permissionUnique: string;\n  //#propertyTypeToObserve: UmbPropertyTypeModel;\n  #propertyTypeToDisable: UmbPropertyTypeModel;\n  #variantId?: UmbVariantId;\n  #value?: string;\n\n  constructor(\n    host: UmbControllerHost,\n    propertyTypeToObserve: UmbPropertyTypeModel,\n    propertyTypeToDisable: UmbPropertyTypeModel,\n    variantId?: UmbVariantId\n  ) {\n    super(host);\n    //this.#propertyTypeToObserve = propertyTypeToObserve;\n    this.#propertyTypeToDisable = propertyTypeToDisable;\n    this.#variantId = variantId;\n    this.#permissionUnique = UmbId.new();\n\n    this.consumeContext(UMB_CONTENT_WORKSPACE_CONTEXT, async (context) => {\n      this.#workspaceContext = context;\n      this.observe(\n        await context?.propertyValueByAlias<string>(\n          propertyTypeToObserve.alias,\n          this.#variantId\n        ),\n        (value) => {\n          this.#value = value;\n          this.#setPermission();\n        }\n      );\n    });\n  }\n\n  #setPermission() {\n    if (!this.#propertyTypeToDisable || !this.#workspaceContext) {\n      return;\n    }\n\n    // Check value for availability:\n    const enable = this.#value && this.#value.length > 0;\n\n    // Update validation message:\n    if (this.#workspaceContext) {\n      if (enable) {\n        this.#workspaceContext.propertyWriteGuard.removeRule(\n          this.#permissionUnique\n        );\n      } else {\n        // Create a guard rule:\n        const rule = {\n          unique: this.#permissionUnique,\n          permitted: false,\n          message:\n            \"The property is not writable because of my custom restriction.\",\n          propertyType: {\n            unique: this.#propertyTypeToDisable!.unique,\n          },\n          variantId: this.#variantId,\n        };\n        // Add the rule to the write guard\n        this.#workspaceContext.propertyWriteGuard.addRule(rule);\n      }\n    }\n  }\n}\n\n// Declare a api export, so Extension Registry can initialize this class:\nexport const api = CustomPropertyPermissionSetter;\n","import { UmbContextToken } from \"@umbraco-cms/backoffice/context-api\";\nimport { UmbContextBase } from \"@umbraco-cms/backoffice/class-api\";\nimport type { UmbControllerHost } from \"@umbraco-cms/backoffice/controller-api\";\nimport { UMB_CONTENT_WORKSPACE_CONTEXT } from \"@umbraco-cms/backoffice/content\";\nimport { UmbVariantId } from \"@umbraco-cms/backoffice/variant\";\nimport { CustomPropertyPermissionSetter } from \"./property-permissions-setter\";\nimport { observeMultiple } from \"@umbraco-cms/backoffice/observable-api\";\n\n// Configuration for which property alias to validate:\nconst PROPERTY_TO_OBSERVE_ALIAS = \"facilities\";\nconst PROPERTY_TO_DISABLE_ALIAS = \"hotels\";\n\n// The Validation Workspace Context Controller:\nexport class CustomPropertyPermissionWorkspaceContext extends UmbContextBase {\n  #permissionSetters?: Array<CustomPropertyPermissionSetter>;\n\n  constructor(host: UmbControllerHost) {\n    super(host, EXAMPLE_CUSTOM_VALIDATION_CONTEXT);\n\n    this.consumeContext(UMB_CONTENT_WORKSPACE_CONTEXT, async (context) => {\n      if (!context) {\n        this.removeUmbControllerByAlias(\"observePropertyTypes\");\n        this.removeUmbControllerByAlias(\"observeVariantOptions\");\n        return;\n      }\n\n      // Observe the two property types to see if they vary by culture:\n      this.observe(\n        observeMultiple([\n          await context!.structure.propertyStructureByAlias(\n            PROPERTY_TO_OBSERVE_ALIAS\n          ),\n          await context!.structure.propertyStructureByAlias(\n            PROPERTY_TO_DISABLE_ALIAS\n          ),\n        ]),\n        ([observePropertyType, readOnlyPropertyType]) => {\n          if (!observePropertyType || !readOnlyPropertyType) {\n            this.removeUmbControllerByAlias(\"observeVariantOptions\");\n            this.#permissionSetters?.forEach((x) => x.destroy());\n            return;\n          }\n\n          if (observePropertyType.variesByCulture) {\n            // Because this property exists in multiple cultures we should observe cultures an create a custom validator for each culture value:\n            this.observe(\n              context?.variantOptions,\n              (variantOptions) => {\n                // clean up old validators:\n                this.#permissionSetters?.forEach((x) => x.destroy());\n\n                this.#permissionSetters = variantOptions?.map((option) => {\n                  return new CustomPropertyPermissionSetter(\n                    this,\n                    observePropertyType,\n                    readOnlyPropertyType,\n                    UmbVariantId.Create(option)\n                  );\n                });\n              },\n              \"observeVariantOptions\"\n            );\n          } else {\n            // Not varying by culture, so we can just create a single validator for the invariant value:\n            this.#permissionSetters?.forEach((x) => x.destroy());\n            this.#permissionSetters = [\n              new CustomPropertyPermissionSetter(\n                this,\n                observePropertyType,\n                readOnlyPropertyType\n              ),\n            ];\n          }\n        },\n        \"observePropertyTypes\"\n      );\n    });\n  }\n}\n\n// Declare a api export, so Extension Registry can initialize this class:\nexport const api = CustomPropertyPermissionWorkspaceContext;\n\n// Declare a Context Token, to other can request the context and to ensure typings.\nexport const EXAMPLE_CUSTOM_VALIDATION_CONTEXT =\n  new UmbContextToken<CustomPropertyPermissionWorkspaceContext>(\n    \"UmbWorkspaceContext\",\n    \"example.workspaceContext.propertyPermissions\"\n  );\n"],"names":["CustomPropertyPermissionSetter","UmbControllerBase","host","propertyTypeToObserve","propertyTypeToDisable","variantId","__privateAdd","_CustomPropertyPermissionSetter_instances","_workspaceContext","_permissionUnique","_propertyTypeToDisable","_variantId","_value","__privateSet","UmbId","UMB_CONTENT_WORKSPACE_CONTEXT","context","__privateGet","value","__privateMethod","setPermission_fn","enable","rule","PROPERTY_TO_OBSERVE_ALIAS","PROPERTY_TO_DISABLE_ALIAS","CustomPropertyPermissionWorkspaceContext","UmbContextBase","EXAMPLE_CUSTOM_VALIDATION_CONTEXT","_permissionSetters","observeMultiple","observePropertyType","readOnlyPropertyType","_a","x","variantOptions","option","UmbVariantId","_b","api","UmbContextToken"],"mappings":"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"}